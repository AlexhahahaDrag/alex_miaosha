<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.alex.finance.mapper.shopFinance.ShopFinanceMapper">

    <!-- 通用查询映射结果 -->
    <resultMap id="BaseResultMap" type="com.alex.finance.entity.shopFinance.ShopFinance">
        <result column="id" property="id"/>
        <result column="is_delete" property="isDelete"/>
        <result column="creator" property="creator"/>
        <result column="updater" property="updater"/>
        <result column="deleter" property="deleter"/>
        <result column="create_time" property="createTime"/>
        <result column="update_time" property="updateTime"/>
        <result column="delete_time" property="deleteTime"/>
        <result column="operator" property="operator"/>
        <result column="operate_time" property="operateTime"/>
        <result column="shop_name" property="shopName"/>
        <result column="shop_code" property="shopCode"/>
        <result column="sale_amount" property="saleAmount"/>
        <result column="is_valid" property="isValid"/>
        <result column="sale_date" property="saleDate"/>
        <result column="pay_way" property="payWay"/>
        <result column="income_and_expenses" property="incomeAndExpenses"/>
        <result column="sale_num" property="saleNum"/>
        <result column="shop_order_id" property="shopOrderId"/>
        <result column="shop_stock_id" property="shopStockId"/>
    </resultMap>

    <!-- 通用查询结果列 -->
    <sql id="Base_Column_List">
        t_shop_finance.id,
        t_shop_finance.is_delete,
        t_shop_finance.creator,
        t_shop_finance.updater,
        t_shop_finance.deleter,
        t_shop_finance.create_time,
        t_shop_finance.update_time,
        t_shop_finance.delete_time,
        t_shop_finance.operator,
        t_shop_finance.operate_time,
        t_shop_finance.shop_name,
        t_shop_finance.shop_code, t_shop_finance.sale_amount,
        t_shop_finance.is_valid, t_shop_finance.sale_date,
        t_shop_finance.pay_way, t_shop_finance.income_and_expenses,
        t_shop_finance.sale_num, t_shop_finance.shop_order_id,
        t_shop_finance.shop_stock_id
    </sql>

    <select id="getPage" resultType="com.alex.api.finance.vo.shopFinance.ShopFinanceVo">
        select<include refid="Base_Column_List"/>from t_shop_finance
        <where>
            t_shop_finance.is_delete = 0
            <include refid="queryInfo"/>
        </where>
        order by t_shop_finance.operate_time desc
    </select>

    <select id="queryShopFinance" resultType="com.alex.api.finance.vo.shopFinance.ShopFinanceVo">
        select
        <include refid="Base_Column_List"/>
        from t_shop_finance
        <where>
            t_shop_finance.id = #{id}
            and t_shop_finance.is_delete = 0
        </where>
    </select>

    <sql id="queryInfo">
        <if test="shopFinanceVo != null">
            <if test="shopFinanceVo.shopName != null">
                and t_shop_finance.shop_name like concat('%', #{shopFinanceVo.shopName}, '%')
            </if>
            <if test="shopFinanceVo.shopCode != null">
                and t_shop_finance.shop_code like concat('%', #{shopFinanceVo.shopCode}, '%')
            </if>
            <if test="shopFinanceVo.saleAmount != null">
                and t_shop_finance.sale_amount = #{shopFinanceVo.saleAmount}
            </if>
            <if test="shopFinanceVo.saleAmountFrom != null">
                and t_shop_finance.sale_amount >= #{shopFinanceVo.saleAmountFrom}
            </if>
            <if test="shopFinanceVo.saleAmountEnd != null">
                and t_shop_finance.sale_amount &lt;= #{shopFinanceVo.saleAmountEnd}
            </if>
            <if test="shopFinanceVo.isValid != null">
                and t_shop_finance.is_valid like concat('%', #{shopFinanceVo.isValid}, '%')
            </if>
            <if test="shopFinanceVo.saleDate != null">
                and t_shop_finance.sale_date = #{shopFinanceVo.saleDate}
            </if>
            <if test="shopFinanceVo.saleDateFrom != null">
                and t_shop_finance.sale_date >= #{shopFinanceVo.saleDateFrom}
            </if>
            <if test="shopFinanceVo.saleDateEnd != null">
                and t_shop_finance.sale_date &lt; DATE_ADD(#{shopFinanceVo.saleDateEnd}, interval 1 day)
            </if>
            <if test="shopFinanceVo.incomeAndExpenses != null">
                and t_shop_finance.income_and_expenses = #{shopFinanceVo.incomeAndExpenses}
            </if>
            <if test="shopFinanceVo.payWay != null">
                and t_shop_finance.pay_way = #{shopFinanceVo.payWay}
            </if>
             <if test="shopFinanceVo.shopOrderId != null">
                and t_shop_finance.shop_order_id = #{shopFinanceVo.shopOrderId}
            </if>
        </if>
    </sql>
    
      <sql id="roleInfo">
        <if test="roleCode != null">
            <if test="roleCode.contains('user')">
                AND t_shop_finance.creator = #{userId}
            </if>
            <if test="roleCode.contains('admin')">
                AND t_shop_finance.creator in
                (select user_id from alex_user.t_org_user_info where t_org_user_info.org_id = #{orgId})
            </if>
        </if>
      </sql>

    <select id="getDayShopFinanceInfo" resultType="com.alex.api.finance.vo.shopFinanceAnalysis.ShopFinanceAnalysisVo">
        WITH RECURSIVE date_series AS (
        SELECT
            concat(#{searchDate}, '-01') AS DATE
        UNION ALL
        SELECT
            DATE_ADD( DATE, INTERVAL 1 DAY )
        FROM
            date_series
        WHERE
            DATE_ADD( DATE, INTERVAL 1 DAY ) &lt; last_day( concat(#{searchDate}, '-01') ) + INTERVAL 1 DAY
        ) SELECT
        date_info.DATE AS info_date,
        IFNULL( info.sale_amount, 0 ) AS sale_amount,
        IFNULL( info.sale_num, 0 ) AS sale_num
    FROM
        date_series AS date_info
        LEFT JOIN (
        SELECT
            DATE_FORMAT( sale_date, '%Y-%m-%d' ) AS info_date,
            sum( sale_amount ) AS sale_amount,
            sum( sale_num ) AS sale_num
        FROM
            t_shop_finance
        WHERE
            sale_date >= cast( concat(#{searchDate}, '-01') AS DATETIME )
            AND sale_date &lt; DATE_ADD( cast( concat(#{searchDate}, '-01') AS DATETIME ), INTERVAL 1 MONTH )
            AND is_valid = '1'
            AND is_delete = '0'
            and t_shop_finance.income_and_expenses = 'income'
            <include refid="roleInfo"/>
        GROUP BY
            info_date
        ) info ON date_info.DATE = info.info_date
    ORDER BY
        date_info.DATE
    </select>

    <select id="getMonthShopFinanceInfo" resultType="com.alex.api.finance.vo.shopFinanceAnalysis.ShopFinanceAnalysisVo">
        WITH recursive c ( n ) AS ( SELECT 0 UNION ALL SELECT n + 1 FROM c WHERE n &lt; 12 ) SELECT
        date_info.n AS info_date,
        ifnull( info.sale_amount, 0 ) AS sale_amount ,
        ifnull( info.sale_num, 0 ) AS sale_num
        FROM
            ( SELECT c.n FROM c ) date_info
            LEFT JOIN (
            SELECT
                DATE_FORMAT( sale_date, '%m' ) AS info_date,
                sum( sale_amount ) AS sale_amount,
                sum( sale_num ) AS sale_num
            FROM
                t_shop_finance 
            WHERE
                sale_date >= cast( concat( SUBSTR( #{searchDate}, 1, 4 ), '-01-01' ) AS DATETIME ) 
                AND sale_date &lt; DATE_ADD( cast( concat( #{searchDate}, '-01' ) AS DATETIME ), INTERVAL 1 MONTH ) 
                AND is_valid = '1' 
                AND is_delete = '0'
                and t_shop_finance.income_and_expenses = 'income'
                <include refid="roleInfo"/>
            GROUP BY
                info_date 
            ) info ON info.info_date = date_info.n 
        ORDER BY
            date_info.n
    </select>

    <select id="getPayWayInfo" resultType="com.alex.api.finance.vo.shopFinanceAnalysis.ShopFinanceAnalysisVo">
        SELECT
          t_shop_finance.pay_way,
          dict_info.type_name as pay_way_name,
          sum(t_shop_finance.sale_amount) AS sale_amount,
          sum(t_shop_finance.sale_num) AS sale_num
        FROM
          t_shop_finance
        left join dict_info
            on dict_info.type_code = t_shop_finance.pay_way
            and dict_info.belong_to = 'shop_pay_way'
            and dict_info.is_valid = '1'
            and dict_info.is_delete = '0'
        WHERE
            t_shop_finance.sale_date >= cast(concat(#{searchDate}, '-01') AS DATETIME)
          AND t_shop_finance.sale_date &lt; DATE_ADD(
            cast(concat(#{searchDate}, '-01') AS DATETIME),
            INTERVAL 1 MONTH
          )
          AND t_shop_finance.is_valid = '1'
          AND t_shop_finance.is_delete = '0'
          and t_shop_finance.income_and_expenses = 'income'
          <include refid="roleInfo"/>
        group by
          t_shop_finance.pay_way,
          dict_info.type_name
    </select>
    
    <select id="getShopNameInfo" resultType="com.alex.api.finance.vo.shopFinanceAnalysis.ShopFinanceAnalysisVo">
        SELECT
          t_shop_stock.category,
          case when t_shop_stock.category is null then '老的数据' else dict_info.type_name end as shop_name,
          sum(t_shop_finance.sale_amount) AS sale_amount,
          sum(t_shop_finance.sale_num) AS sale_num
        FROM
          t_shop_finance
        left join t_shop_stock
         on t_shop_stock.id =  t_shop_finance.shop_stock_id
        left join dict_info
         on dict_info.type_code = t_shop_stock.category
            and dict_info.belong_to = 'shop_category'
            and dict_info.is_valid = '1'
            and dict_info.is_delete = '0'
        WHERE
          t_shop_finance.sale_date >= cast(concat(#{searchDate}, '-01') AS DATETIME)
          AND t_shop_finance.sale_date &lt; DATE_ADD(
            cast(concat(#{searchDate}, '-01') AS DATETIME),
            INTERVAL 1 MONTH
          )
          AND t_shop_finance.is_valid = '1'
          AND t_shop_finance.is_delete = '0'
          and t_shop_finance.income_and_expenses = 'income'
          <include refid="roleInfo"/>
        group by
            t_shop_stock.category,
            dict_info.type_name
    </select>
    
    <select id="getChainAndYear" resultType="com.alex.api.finance.vo.shopFinanceAnalysis.ShopFinanceChainYearVo">
        select cur_info.info_date,
               cur_info.sale_amount,
               cur_info.sale_num,
               last_month.sale_amount                                                            as month_sale_amount,
               last_month.sale_num                                                               as month_sale_num,
               last_year.sale_amount                                                             as year_sale_amount,
               last_year.sale_num                                                                as yaer_sale_num,
               IF(last_month.sale_amount is null
                      or last_month.sale_amount = 0, null,
                  ROUND((cur_info.sale_amount - last_month.sale_amount) / last_month.sale_amount * 100,
                        2))                                                                      as sale_amount_chain,
               IF(last_month.sale_num is null
                      or last_month.sale_num = 0, null,
                  ROUND((cur_info.sale_num - last_month.sale_num) / last_month.sale_num * 100,
                        2))                                                                      as sale_num_chain,
               IF(last_year.sale_amount is null
                      or last_year.sale_amount = 0, null,
                  ROUND((cur_info.sale_amount - last_year.sale_amount) / last_year.sale_amount * 100,
                        2))                                                                      as sale_amount_year,
               IF(last_year.sale_num is null
                      or last_year.sale_num = 0, null,
                  ROUND((cur_info.sale_num - last_year.sale_num) / last_year.sale_num * 100, 2)) as sale_num_year
        from (SELECT DATE_FORMAT(sale_date, '%m') AS info_date,
                     sum(sale_amount)             AS sale_amount,
                     sum(sale_num)                AS sale_num
              FROM t_shop_finance
              WHERE sale_date >= cast(#{startDate} AS DATETIME)
                AND sale_date &lt; DATE_ADD(
                      cast(#{endDate} AS DATETIME),
                      INTERVAL 1 MONTH
                                   )
                AND is_valid = '1'
                AND is_delete = '0'
                and t_shop_finance.income_and_expenses = 'income'
                <include refid="roleInfo"/>
              GROUP BY info_date) as cur_info
                 left join (SELECT DATE_FORMAT(sale_date, '%m') AS info_date,
                                   sum(sale_amount)             AS sale_amount,
                                   sum(sale_num)                AS sale_num
                            FROM t_shop_finance
                            WHERE sale_date >= DATE_ADD(
                                    cast(#{startDate} AS DATETIME),
                                    INTERVAL - 1 MONTH
                                               )
                              AND sale_date &lt; cast(#{endDate} AS DATETIME)
                              AND is_valid = '1'
                              AND is_delete = '0'
                              and t_shop_finance.income_and_expenses = 'income'
                              <include refid="roleInfo"/>
                            GROUP BY info_date) as last_month on 1 = 1
                 left join (SELECT DATE_FORMAT(sale_date, '%m') AS info_date,
                                   sum(sale_amount)             AS sale_amount,
                                   sum(sale_num)                AS sale_num
                            FROM t_shop_finance
                            WHERE sale_date >= DATE_ADD(
                                    cast(#{startDate} AS DATETIME),
                                    interval -1 year
                                               )
                              AND sale_date &lt; DATE_ADD(
                                    cast(#{endDate} AS DATETIME),
                                    INTERVAL -11 MONTH
                                                 )
                              AND is_valid = '1'
                              AND is_delete = '0'
                              and t_shop_finance.income_and_expenses = 'income'
                              <include refid="roleInfo"/>
                            GROUP BY info_date) as last_year on last_year.info_date = cur_info.info_date
    </select>
    
    <select id="getCurShopFinanceInfo" resultType="com.alex.api.finance.vo.shopFinanceAnalysis.ShopFinanceAnalysisVo">
        SELECT
            t_org_user_info.org_id,
            <if test="type == 'day'">
                DATE_FORMAT( t_shop_finance.sale_date, '%Y-%m-%d' ) AS info_date,
            </if>
            <if test="type == 'month'">
                DATE_FORMAT( t_shop_finance.sale_date, '%Y-%m' ) AS info_date,
            </if>
            <if test="type == 'year'">
                DATE_FORMAT( t_shop_finance.sale_date, '%Y' ) AS info_date,
            </if>
            sum( t_shop_finance.sale_amount ) AS sale_amount,
            sum( t_shop_finance.sale_num ) AS sale_num
        FROM
            t_shop_finance
            left join alex_user.t_org_user_info on t_org_user_info.user_id = t_shop_finance.creator
            and t_org_user_info.status = '1'
            and t_org_user_info.is_delete = '0'
        WHERE
            t_shop_finance.sale_date >= cast(#{startDate} AS DATETIME )
          AND t_shop_finance.sale_date &lt; DATE_ADD( cast(#{endDate} AS DATETIME ), INTERVAL 1 DAY )
          AND t_shop_finance.is_valid = '1'
          AND t_shop_finance.is_delete = '0'
          and t_shop_finance.income_and_expenses = 'income'
          <include refid="roleInfo"/>
        GROUP BY
            t_org_user_info.org_id, info_date
    </select>
    
    <select id="getAllShopStockInfo" resultType="com.alex.api.finance.vo.shopFinanceAnalysis.ShopFinanceAnalysisVo">
        select
            sum(sale_num) as sale_num,
            sum(sale_num * cost_amount) as cost_amount
        FROM
            t_shop_stock
        WHERE
            is_valid = '1'
          AND is_delete = '0'
    </select>
</mapper>
